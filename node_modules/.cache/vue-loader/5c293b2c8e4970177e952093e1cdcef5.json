{"remainingRequest":"/Users/circle/Desktop/vue-music/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/circle/Desktop/vue-music/src/base/listview/listview.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/circle/Desktop/vue-music/src/base/listview/listview.vue","mtime":1574170630918},{"path":"/Users/circle/Desktop/vue-music/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/circle/Desktop/vue-music/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/circle/Desktop/vue-music/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/circle/Desktop/vue-music/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport Scroll from 'base/scroll/scroll'\nimport Loading from 'base/loading/loading'\nimport { getData } from 'common/js/dom'\n\nconst TITLE_HEIGHT = 30\nconst ANCHOR_HEIGHT = 18\n\nexport default {\n  props: {\n    data: {\n      type: Array,\n      default () {\n        return []\n      }\n    }\n  },\n  computed: {\n    shortcutList () {\n      return this.data.map((group) => {\n        return group.title.substr(0, 1)\n      })\n    },\n    fixedTitle () {\n      if (this.scrollY > 0) {\n        return ''\n      }\n      return this.data[this.currentIndex] ? this.data[this.currentIndex].title : ''\n    }\n  },\n  data () {\n    return {\n      scrollY: -1,\n      currentIndex: 0,\n      diff: -1\n    }\n  },\n  created () {\n    this.probeType = 3\n    this.listenScroll = true\n    this.touch = {}\n    this.listHeight = []\n  },\n  methods: {\n    selectItem (item) {\n      this.$emit('select', item)\n    },\n    onShortcutTouchStart (e) {\n      let anchorIndex = getData(e.target, 'index')\n      let firstTouch = e.touches[0]\n      this.touch.y1 = firstTouch.pageY\n      this.touch.anchorIndex = anchorIndex\n\n      this._scrollTo(anchorIndex)\n    },\n    onShortcutTouchMove (e) {\n      let firstTouch = e.touches[0]\n      this.touch.y2 = firstTouch.pageY\n      let delta = (this.touch.y2 - this.touch.y1) / ANCHOR_HEIGHT | 0\n      let anchorIndex = parseInt(this.touch.anchorIndex) + delta\n\n      this._scrollTo(anchorIndex)\n    },\n    refresh () {\n      this.$refs.listview.refresh()\n    },\n    scroll (pos) {\n      this.scrollY = pos.y\n    },\n    _calculateHeight () {\n      this.listHeight = []\n      const list = this.$refs.listGroup\n      let height = 0\n      this.listHeight.push(height)\n      for (let i = 0; i < list.length; i++) {\n        let item = list[i]\n        height += item.clientHeight\n        this.listHeight.push(height)\n      }\n    },\n    _scrollTo (index) {\n      if (!index && index !== 0) {\n        return\n      }\n      if (index < 0) {\n        index = 0\n      } else if (index > this.listHeight.length - 2) {\n        index = this.listHeight.length - 2\n      }\n      this.$refs.listview.scrollToElement(this.$refs.listGroup[index], 0)\n      this.scrollY = this.$refs.listview.scroll.y\n    }\n  },\n  watch: {\n    data () {\n      setTimeout(() => {\n        this._calculateHeight()\n      }, 20)\n    },\n    scrollY (newY) {\n      const listHeight = this.listHeight\n      // 当滚动到顶部，newY>0\n      if (newY > 0) {\n        this.currentIndex = 0\n        return\n      }\n      // 在中间部分滚动\n      for (let i = 0; i < listHeight.length - 1; i++) {\n        let height1 = listHeight[i]\n        let height2 = listHeight[i + 1]\n        if (-newY >= height1 && -newY < height2) {\n          this.currentIndex = i\n          this.diff = height2 + newY\n          return\n        }\n      }\n      // 当滚动到底部，且-newY大于最后一个元素的上限\n      this.currentIndex = listHeight.length - 2\n    },\n    diff (newVal) {\n      let fixedTop = (newVal > 0 && newVal < TITLE_HEIGHT) ? newVal - TITLE_HEIGHT : 0\n      if (this.fixedTop === fixedTop) {\n        return\n      }\n      this.fixedTop = fixedTop\n      this.$refs.fixed.style.transform = `translate3d(0,${fixedTop}px,0)`\n    }\n  },\n  components: {\n    Scroll,\n    Loading\n  }\n}\n\n",{"version":3,"sources":["listview.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqfile":"listview.vue","sourceRoot":"src/base/listview","sourcesContent":["<template>\n  <scroll @scroll=\"scroll\"\n          :listen-scroll=\"listenScroll\"\n          :probe-type=\"probeType\"\n          :data=\"data\"\n          class=\"listview\"\n          ref=\"listview\">\n    <ul>\n      <li v-for=\"(group,index) in data\" :key=\"index\" class=\"list-group\" ref=\"listGroup\">\n        <h2 class=\"list-group-title\">{{group.title}}</h2>\n        <uL>\n          <li @click=\"selectItem(item)\" v-for=\"(item,index) in group.items\" :key=\"index\" class=\"list-group-item\">\n            <img class=\"avatar\" v-lazy=\"item.avatar\">\n            <span class=\"name\">{{item.name}}</span>\n          </li>\n        </uL>\n      </li>\n    </ul>\n    <div class=\"list-shortcut\" @touchstart.stop.prevent=\"onShortcutTouchStart\"\n         @touchmove.stop.prevent=\"onShortcutTouchMove\"\n         @touchend.stop>\n      <ul>\n        <li v-for=\"(item, index) in shortcutList\" :data-index=\"index\" class=\"item\" :key=\"index\"\n            :class=\"{'current':currentIndex===index}\">{{item}}\n        </li>\n      </ul>\n    </div>\n    <div class=\"list-fixed\" ref=\"fixed\" v-show=\"fixedTitle\">\n      <div class=\"fixed-title\">{{fixedTitle}}</div>\n    </div>\n    <div v-show=\"!data.length\" class=\"loading-container\">\n      <loading></loading>\n    </div>\n  </scroll>\n</template>\n\n<script type=\"text/ecmascript-6\">\n  import Scroll from 'base/scroll/scroll'\n  import Loading from 'base/loading/loading'\n  import { getData } from 'common/js/dom'\n\n  const TITLE_HEIGHT = 30\n  const ANCHOR_HEIGHT = 18\n\n  export default {\n    props: {\n      data: {\n        type: Array,\n        default () {\n          return []\n        }\n      }\n    },\n    computed: {\n      shortcutList () {\n        return this.data.map((group) => {\n          return group.title.substr(0, 1)\n        })\n      },\n      fixedTitle () {\n        if (this.scrollY > 0) {\n          return ''\n        }\n        return this.data[this.currentIndex] ? this.data[this.currentIndex].title : ''\n      }\n    },\n    data () {\n      return {\n        scrollY: -1,\n        currentIndex: 0,\n        diff: -1\n      }\n    },\n    created () {\n      this.probeType = 3\n      this.listenScroll = true\n      this.touch = {}\n      this.listHeight = []\n    },\n    methods: {\n      selectItem (item) {\n        this.$emit('select', item)\n      },\n      onShortcutTouchStart (e) {\n        let anchorIndex = getData(e.target, 'index')\n        let firstTouch = e.touches[0]\n        this.touch.y1 = firstTouch.pageY\n        this.touch.anchorIndex = anchorIndex\n\n        this._scrollTo(anchorIndex)\n      },\n      onShortcutTouchMove (e) {\n        let firstTouch = e.touches[0]\n        this.touch.y2 = firstTouch.pageY\n        let delta = (this.touch.y2 - this.touch.y1) / ANCHOR_HEIGHT | 0\n        let anchorIndex = parseInt(this.touch.anchorIndex) + delta\n\n        this._scrollTo(anchorIndex)\n      },\n      refresh () {\n        this.$refs.listview.refresh()\n      },\n      scroll (pos) {\n        this.scrollY = pos.y\n      },\n      _calculateHeight () {\n        this.listHeight = []\n        const list = this.$refs.listGroup\n        let height = 0\n        this.listHeight.push(height)\n        for (let i = 0; i < list.length; i++) {\n          let item = list[i]\n          height += item.clientHeight\n          this.listHeight.push(height)\n        }\n      },\n      _scrollTo (index) {\n        if (!index && index !== 0) {\n          return\n        }\n        if (index < 0) {\n          index = 0\n        } else if (index > this.listHeight.length - 2) {\n          index = this.listHeight.length - 2\n        }\n        this.$refs.listview.scrollToElement(this.$refs.listGroup[index], 0)\n        this.scrollY = this.$refs.listview.scroll.y\n      }\n    },\n    watch: {\n      data () {\n        setTimeout(() => {\n          this._calculateHeight()\n        }, 20)\n      },\n      scrollY (newY) {\n        const listHeight = this.listHeight\n        // 当滚动到顶部，newY>0\n        if (newY > 0) {\n          this.currentIndex = 0\n          return\n        }\n        // 在中间部分滚动\n        for (let i = 0; i < listHeight.length - 1; i++) {\n          let height1 = listHeight[i]\n          let height2 = listHeight[i + 1]\n          if (-newY >= height1 && -newY < height2) {\n            this.currentIndex = i\n            this.diff = height2 + newY\n            return\n          }\n        }\n        // 当滚动到底部，且-newY大于最后一个元素的上限\n        this.currentIndex = listHeight.length - 2\n      },\n      diff (newVal) {\n        let fixedTop = (newVal > 0 && newVal < TITLE_HEIGHT) ? newVal - TITLE_HEIGHT : 0\n        if (this.fixedTop === fixedTop) {\n          return\n        }\n        this.fixedTop = fixedTop\n        this.$refs.fixed.style.transform = `translate3d(0,${fixedTop}px,0)`\n      }\n    },\n    components: {\n      Scroll,\n      Loading\n    }\n  }\n\n</script>\n\n<style scoped lang=\"stylus\" rel=\"stylesheet/stylus\">\n  @import \"~common/stylus/variable\"\n\n  .listview\n    position: relative\n    width: 100%\n    height: 100%\n    overflow: hidden\n    background: $color-background\n    .list-group\n      padding-bottom: 30px\n      .list-group-title\n        height: 30px\n        line-height: 30px\n        padding-left: 20px\n        font-size: $font-size-small\n        color: $color-text-l\n        background: $color-highlight-background\n      .list-group-item\n        display: flex\n        align-items: center\n        padding: 20px 0 0 30px\n        .avatar\n          width: 50px\n          height: 50px\n          border-radius: 50%\n        .name\n          margin-left: 20px\n          color: $color-text-l\n          font-size: $font-size-medium\n    .list-shortcut\n      position: absolute\n      z-index: 30\n      right: 0\n      top: 50%\n      transform: translateY(-50%)\n      width: 20px\n      padding: 20px 0\n      border-radius: 10px\n      text-align: center\n      background: $color-background-d\n      font-family: Helvetica\n      .item\n        padding: 3px\n        line-height: 1\n        color: $color-text-l\n        font-size: $font-size-small\n        &.current\n          color: $color-theme\n    .list-fixed\n      position: absolute\n      top: 0\n      left: 0\n      width: 100%\n      .fixed-title\n        height: 30px\n        line-height: 30px\n        padding-left: 20px\n        font-size: $font-size-small\n        color: $color-text-l\n        background: $color-highlight-background\n    .loading-container\n      position: absolute\n      width: 100%\n      top: 50%\n      transform: translateY(-50%)\n</style>\n"]}]}