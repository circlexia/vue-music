{"remainingRequest":"/Users/circle/Desktop/vue-music/node_modules/babel-loader/lib/index.js!/Users/circle/Desktop/vue-music/node_modules/eslint-loader/index.js??ref--13-0!/Users/circle/Desktop/vue-music/src/common/js/mixin.js","dependencies":[{"path":"/Users/circle/Desktop/vue-music/src/common/js/mixin.js","mtime":1574170630923},{"path":"/Users/circle/Desktop/vue-music/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/circle/Desktop/vue-music/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/circle/Desktop/vue-music/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.array.find-index\";\nimport _objectSpread from \"/Users/circle/Desktop/vue-music/node_modules/@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport { mapGetters, mapMutations, mapActions } from 'vuex';\nimport { playMode } from 'common/js/config';\nimport { shuffle } from 'common/js/util';\nexport var playlistMixin = {\n  computed: _objectSpread({}, mapGetters(['playlist'])),\n  mounted: function mounted() {\n    this.handlePlaylist(this.playlist);\n  },\n  activated: function activated() {\n    this.handlePlaylist(this.playlist);\n  },\n  watch: {\n    playlist: function playlist(newVal) {\n      this.handlePlaylist(newVal);\n    }\n  },\n  methods: {\n    handlePlaylist: function handlePlaylist() {\n      throw new Error('component must implement handlePlaylist method');\n    }\n  }\n};\nexport var playerMixin = {\n  computed: _objectSpread({\n    iconMode: function iconMode() {\n      return this.mode === playMode.sequence ? 'icon-sequence' : this.mode === playMode.loop ? 'icon-loop' : 'icon-random';\n    }\n  }, mapGetters(['sequenceList', 'playlist', 'currentSong', 'mode', 'favoriteList']), {\n    favoriteIcon: function favoriteIcon() {\n      return this.getFavoriteIcon(this.currentSong);\n    }\n  }),\n  methods: _objectSpread({\n    changeMode: function changeMode() {\n      var mode = (this.mode + 1) % 3;\n      this.setPlayMode(mode);\n      var list = null;\n\n      if (mode === playMode.random) {\n        list = shuffle(this.sequenceList);\n      } else {\n        list = this.sequenceList;\n      }\n\n      this.resetCurrentIndex(list);\n      this.setPlaylist(list);\n    },\n    resetCurrentIndex: function resetCurrentIndex(list) {\n      var _this = this;\n\n      var index = list.findIndex(function (item) {\n        return item.id === _this.currentSong.id;\n      });\n      this.setCurrentIndex(index);\n    },\n    toggleFavorite: function toggleFavorite(song) {\n      if (this.isFavorite(song)) {\n        this.deleteFavoriteList(song);\n      } else {\n        this.saveFavoriteList(song);\n      }\n    },\n    getFavoriteIcon: function getFavoriteIcon(song) {\n      if (this.isFavorite(song)) {\n        return 'icon-favorite';\n      }\n\n      return 'icon-not-favorite';\n    },\n    isFavorite: function isFavorite(song) {\n      var index = this.favoriteList.findIndex(function (item) {\n        return item.id === song.id;\n      });\n      return index > -1;\n    }\n  }, mapMutations({\n    setPlayMode: 'SET_PLAY_MODE',\n    setPlaylist: 'SET_PLAYLIST',\n    setCurrentIndex: 'SET_CURRENT_INDEX',\n    setPlayingState: 'SET_PLAYING_STATE'\n  }), mapActions(['saveFavoriteList', 'deleteFavoriteList']))\n};\nexport var searchMixin = {\n  data: function data() {\n    return {\n      query: '',\n      refreshDelay: 120\n    };\n  },\n  computed: _objectSpread({}, mapGetters(['searchHistory'])),\n  methods: _objectSpread({\n    onQueryChange: function onQueryChange(query) {\n      // 处理带空格的情况\n      this.query = query.trim();\n    },\n    blurInput: function blurInput() {\n      this.$refs.searchBox.blur();\n    },\n    addQuery: function addQuery(query) {\n      this.$refs.searchBox.setQuery(query);\n    },\n    saveSearch: function saveSearch() {\n      this.saveSearchHistory(this.query);\n    }\n  }, mapActions(['saveSearchHistory', 'deleteSearchHistory']))\n};",{"version":3,"sources":["/Users/circle/Desktop/vue-music/src/common/js/mixin.js"],"names":["mapGetters","mapMutations","mapActions","playMode","shuffle","playlistMixin","computed","mounted","handlePlaylist","playlist","activated","watch","newVal","methods","Error","playerMixin","iconMode","mode","sequence","loop","favoriteIcon","getFavoriteIcon","currentSong","changeMode","setPlayMode","list","random","sequenceList","resetCurrentIndex","setPlaylist","index","findIndex","item","id","setCurrentIndex","toggleFavorite","song","isFavorite","deleteFavoriteList","saveFavoriteList","favoriteList","setPlayingState","searchMixin","data","query","refreshDelay","onQueryChange","trim","blurInput","$refs","searchBox","blur","addQuery","setQuery","saveSearch","saveSearchHistory"],"mappings":"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","sourcesContent":["import { mapGetters, mapMutations, mapActions } from 'vuex'\nimport { playMode } from 'common/js/config'\nimport { shuffle } from 'common/js/util'\n\nexport const playlistMixin = {\n  computed: {\n    ...mapGetters([\n      'playlist'\n    ])\n  },\n  mounted () {\n    this.handlePlaylist(this.playlist)\n  },\n  activated () {\n    this.handlePlaylist(this.playlist)\n  },\n  watch: {\n    playlist (newVal) {\n      this.handlePlaylist(newVal)\n    }\n  },\n  methods: {\n    handlePlaylist () {\n      throw new Error('component must implement handlePlaylist method')\n    }\n  }\n}\n\nexport const playerMixin = {\n  computed: {\n    iconMode () {\n      return this.mode === playMode.sequence ? 'icon-sequence' : this.mode === playMode.loop ? 'icon-loop' : 'icon-random'\n    },\n    ...mapGetters([\n      'sequenceList',\n      'playlist',\n      'currentSong',\n      'mode',\n      'favoriteList'\n    ]),\n    favoriteIcon () {\n      return this.getFavoriteIcon(this.currentSong)\n    }\n  },\n  methods: {\n    changeMode () {\n      const mode = (this.mode + 1) % 3\n      this.setPlayMode(mode)\n      let list = null\n      if (mode === playMode.random) {\n        list = shuffle(this.sequenceList)\n      } else {\n        list = this.sequenceList\n      }\n      this.resetCurrentIndex(list)\n      this.setPlaylist(list)\n    },\n    resetCurrentIndex (list) {\n      let index = list.findIndex((item) => {\n        return item.id === this.currentSong.id\n      })\n      this.setCurrentIndex(index)\n    },\n    toggleFavorite (song) {\n      if (this.isFavorite(song)) {\n        this.deleteFavoriteList(song)\n      } else {\n        this.saveFavoriteList(song)\n      }\n    },\n    getFavoriteIcon (song) {\n      if (this.isFavorite(song)) {\n        return 'icon-favorite'\n      }\n      return 'icon-not-favorite'\n    },\n    isFavorite (song) {\n      const index = this.favoriteList.findIndex((item) => {\n        return item.id === song.id\n      })\n      return index > -1\n    },\n    ...mapMutations({\n      setPlayMode: 'SET_PLAY_MODE',\n      setPlaylist: 'SET_PLAYLIST',\n      setCurrentIndex: 'SET_CURRENT_INDEX',\n      setPlayingState: 'SET_PLAYING_STATE'\n    }),\n    ...mapActions([\n      'saveFavoriteList',\n      'deleteFavoriteList'\n    ])\n  }\n}\n\nexport const searchMixin = {\n  data () {\n    return {\n      query: '',\n      refreshDelay: 120\n    }\n  },\n  computed: {\n    ...mapGetters([\n      'searchHistory'\n    ])\n  },\n  methods: {\n    onQueryChange (query) {\n      // 处理带空格的情况\n      this.query = query.trim()\n    },\n    blurInput () {\n      this.$refs.searchBox.blur()\n    },\n    addQuery (query) {\n      this.$refs.searchBox.setQuery(query)\n    },\n    saveSearch () {\n      this.saveSearchHistory(this.query)\n    },\n    ...mapActions([\n      'saveSearchHistory',\n      'deleteSearchHistory'\n    ])\n  }\n}\n"]}]}